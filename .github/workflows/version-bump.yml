name: Version Bump

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump: patch, minor, or major'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Git user
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Get current version
        id: current_version
        run: echo "VERSION=$(grep -m 1 'Version =' pkg/utils/utils.go | sed 's/.*"\(.*\)".*/\1/')" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION=${{ steps.current_version.outputs.VERSION }}
          VERSION_TYPE=${{ github.event.inputs.version_type }}
          
          # Remove the 'v' prefix if present
          if [[ $CURRENT_VERSION == v* ]]; then
            CURRENT_VERSION=${CURRENT_VERSION:1}
          fi
          
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          if [ "$VERSION_TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$VERSION_TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in code
        run: |
          sed -i "s/Version = \".*\"/Version = \"${{ steps.new_version.outputs.NEW_VERSION }}\"/" pkg/utils/utils.go

      - name: Commit and tag new version
        run: |
          git add pkg/utils/utils.go
          git commit -m "Bump version to ${{ steps.new_version.outputs.NEW_VERSION }}"
          git tag -a "v${{ steps.new_version.outputs.NEW_VERSION }}" -m "Version ${{ steps.new_version.outputs.NEW_VERSION }}"
          git push
          git push --tags