name: Build and Test

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/workflows/release.yml'
      - '.github/workflows/version-bump.yml'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'

jobs:
  build-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.21']

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Build for current platform
      run: go build -v .

    - name: Build for all platforms
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Build for Linux
        GOOS=linux GOARCH=amd64 go build -o ./build/unregex_linux_amd64 .
        GOOS=linux GOARCH=arm64 go build -o ./build/unregex_linux_arm64 .
        
        # Build for Windows
        GOOS=windows GOARCH=amd64 go build -o ./build/unregex_windows_amd64.exe .
        GOOS=windows GOARCH=arm64 go build -o ./build/unregex_windows_arm64.exe .
        
        # Build for macOS
        GOOS=darwin GOARCH=amd64 go build -o ./build/unregex_darwin_amd64 .
        GOOS=darwin GOARCH=arm64 go build -o ./build/unregex_darwin_arm64 .
        
        # List the built binaries
        ls -la ./build/

    - name: Test
      run: go test -v ./...

    - name: Vet
      run: go vet ./...

    - name: Generate coverage report
      run: go test -coverprofile=coverage.out ./...
      if: matrix.os == 'ubuntu-latest'

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        fail_ci_if_error: false
      if: matrix.os == 'ubuntu-latest'